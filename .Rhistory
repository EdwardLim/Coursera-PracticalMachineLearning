submit
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
play()
select(sat, -contains("total"))
sat %>% select(-contains("total")) %>% gather(part_sex, count, -score_range)
sat %>% select(-contains("total")) %>% gather(part_sex, count, -score_range) %>% separate(part_sex, part, sex)
sat %>% select(-contains("total")) %>% gather(part_sex, count, -score_range) %>% separate(part_sex, c("part", "sex"))
submit(0)
submit()
submit()
submit()
Sys.getlocale("LC_TIME")
play()
Sys.getlocale("LC_TIME")
library(datasets)
data(iris)
?iris
iris
head(iris)
virginica <- iris[, Species == "virginica"]
virginica <- iris[, iris$Species == "virginica"]
names(iris)
iris$Species
iris[, iris$species == "virginica"]
virginica <- iris[, iris$species == "virginica"]
View(virginica)
View(iris)
apply(iris[, 1:4], 2, mean)
?apply
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
iris[, iris$Species == "virginica"]
iris[, iris$Species = "virginica"]
iris
iris$Species
str(iris)
iris[, iris$Species==setosa]
iris[, iris$Species=="setosa"]
iris[iris$Species=="virginica", ]
subset(iris,Species=="virginica")
x = subset(iris,Species=="virginica")
y = iris[iris$Species=="virginica", ]
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -(5:20))
select(cran, -5:20)
select(cran, -5:-20)
info()
select(cran, -(X:size))
select(cran, -(5:20))
skip()
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version >= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
skip()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
print
submit()
submit()
submit()
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, sep = "_", into = c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
play()
x <- hms("03:22:14")
class(x)
nxt()
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc <- now(tzone="America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive,tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
range(cars$price)
skip()
quit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
1 - (3/36)
deck
52
4/52
0
12/52
3/51
2/51
swirl()
0.8 * 1.6 / 2
64%
.64
mypdf
play()
?integrate
nxt(0)
nxt()
integrate(mypdf, 0, 1.6)
1
skip()
0.997 * 0.001
(1 - 0.997) * (1 - 0.001)
(1 - 0.985) * (1 - 0.001)
(0.997 * 0.001) / ((0.997 * 0.001) + ((1 - 0.985) * (1 - 0.001)))
(1 + 2 + 3 + 4 + 5 + 6) / 6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
expect_dice((edh + edl) / 2)
(edh + edl) / 2
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
play()
smeans
apply(smeans, 1, mean)
nxt()
mean(smeans)
dice_sqr
play()
dice_fair
1/6
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fiar
ex2_fair
nxt()
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - sqrt(3.5)
ex2_fair - 3.5^2
sum(dice_sqr * dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(n)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
exit
quit()
?rexp
lambda <- 0.2     # The rate.
n <- 40           # Number of observations.
nSim <- 1000      # Number of simulations.
set.seed(1000)
lambda <- 0.2     # The rate.
n <- 40           # Number of observations.
nSim <- 1000      # Number of simulations.
set.seed(1000)
matrix(data=rexp(n * nSim, lambda), nrow=nSim)
expDist <- matrix(data=rexp(n * nSim, lambda), nrow=nSim)
str expDist
str(expDist)
expDist <- matrix(data=rexp(n * nSim, lambda), nrow=nSim)
expDistMeans <- data.frame(means=apply(expDist, 1, mean))
View(expDistMeans)
ggplot(data = expDistMeans, aes(x = means)) +
geom_histogram(binwidth=0.1) +
scale_x_continuous(breaks=round(seq(min(exponentialDistributionMeans$means), max(exponentialDistributionMeans$means), by=1)))
library(ggplot2)
ggplot(data = expDistMeans, aes(x = means)) +
geom_histogram(binwidth=0.1) +
scale_x_continuous(breaks=round(seq(min(exponentialDistributionMeans$means), max(exponentialDistributionMeans$means), by=1)))
ggplot(data = expDistMeans, aes(x = means)) +
geom_histogram(binwidth=0.1) +
scale_x_continuous(breaks=round(seq(min(expDistMeans$means), max(expDistMeans$means), by=1)))
set.seed(100000)
expDist <- matrix(data=rexp(n * nSim, lambda), nrow=nSim)
expDistMeans <- data.frame(means=apply(expDist, 1, mean))
# Plot the means
ggplot(data = expDistMeans, aes(x = means)) +
geom_histogram(binwidth=0.1) +
scale_x_continuous(breaks=round(seq(min(expDistMeans$means), max(expDistMeans$means), by=1)))
As you can see, the expected mean is very close to the experimental means.
```
experimental_means <- mean(expDistMeans$means)
experimental_means
sessionInfo()
library(ggplot2)
library(datasets)
library(gridExtra)
library(GGally)
install.package("gridExtra")
?install
??install
install.packages("gridExtra", "GGally")
library(ggplot2)
library(datasets)
library(gridExtra)
library(GGally)
install.packages("GGally")
library(ggplot2)
library(datasets)
library(gridExtra)
library(GGally)
data(ToothGrowth)
str(ToothGrowth)
View(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
str(ToothGrowth)
data(ToothGrowth)
str(ToothGrowth)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth)
str(ToothGrowth)
lm(formula = len ~ dose + supp, data = ToothGrowth)
summary(fit)
fit <- lm (len ~ dose + supp, data = ToothGrowth)
summary (fit)
?lm
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
f <- lm(y ~ x)
summary(f)
data(mtcars)
x<-mtcars$wt
y<-mtcars$mpg
fit<-lm(y ~ x)
predict(fit,data.frame(x=mean(x)), interval="confidence")
help(mtcars)
summary(fit)
data(mtcars)
predict(fit, data.frame(x=mean(3)), interval="prediction")
fit2 <- lm(y ~ I(x / 2))
tbl2 <- summary(fit2)$coefficients
mean <- tbl2[2,1]
se <- tbl2[2,2]
df <- fit2$df
#Two sides T-Tests
mean + c(-1,1) * qt(0.975, df=df) * se
summary(fit)$coefficients[2, 1]
fit3 <- lm(y ~ I(x / 100))
summary(fit3)$coefficients[2, 1]
fitRes <- fit$residuals ^ 2
fitIntercept <- lm(mpg ~ 1, mtcars)
fitInterceptRes <- fitIntercept$residuals ^ 2
sum(fitRes) /sum(fitInterceptRes)
sum(resid(fit))
mean(3)
predict(fit, data.frame(x=3, interval="prediction")
)
predict(fit, data.frame(x=3), interval="prediction")
fit
x
y
data(mtcars)
str(mtcars)
?attach
attach(mtcars)
fit <- lm(mpg ~ as.factor(cyl) + wt, data=mtcars)
fit
summary(fit)
data(mtcars)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data=mtcars)
summary(fit4)
str(mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72);
y <- c(0.549, -0.026, -0.127, -0.751, 1.344);
fit5 <- lm(y ~ x);
lm.influence(fit5)$hat[5]
x
y
fit5
summary(fit5)
hatvalues(fit5)
dfbetas(fit5)[5, 2]
library(swirl)
swirl()
fit <- lm(child ~ parent, data=galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
str(galton)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est, ols.slope, ols.ic)
varEst <-
var(est)
est
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes - VarEst)
all.equal(varChild, varRes - varEst)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(child ~ parent)
gch
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, data=galton)
square
fit$residuals
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor()
galton$child
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
result <- c(B A B A A E D B A A B C B A E E A B B B)
result <- c(B, A, B, A, A, E, D, B, A, A, B, C, B, A, E, E, A, B, B, B)
result <- c("B" "A")
result <- c("B", "A")
result
as.factor(result)
setwd("~/GitHub/Coursera-PracticalMachineLearning")
